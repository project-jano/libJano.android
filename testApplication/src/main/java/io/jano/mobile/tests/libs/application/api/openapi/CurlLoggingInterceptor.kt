package io.jano.mobile.tests.libs.application.api.openapi

import okhttp3.Headers
import okhttp3.Interceptor
import okhttp3.Request
import okhttp3.Response
import okio.Buffer
import java.io.IOException
import java.nio.charset.Charset
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger


/**
 * An OkHttp interceptor that logs requests as curl shell commands. They can then
 * be copied, pasted and executed inside a terminal environment. This might be
 * useful for troubleshooting client/server API interaction during development,
 * making it easy to isolate and share requests made by the app.
 *
 * Warning: The
 * logs generated by this interceptor have the potential to leak sensitive
 * information. It should only be used in a controlled manner or in a
 * non-production environment.
 */
class CurlLoggingInterceptor @JvmOverloads constructor(private val logger: Logger = Logger.getGlobal()) :
    Interceptor {
    private var curlOptions: String? = null

    /** Set any additional curl command options (see 'curl --help').  */
    fun setCurlOptions(curlOptions: String?) {
        this.curlOptions = curlOptions
    }

    @Throws(IOException::class)
    override fun intercept(chain: Interceptor.Chain): Response {
        val request: Request = chain.request()
        var compressed = false
        var curlCmd = "curl"
        if (curlOptions != null) {
            curlCmd += " $curlOptions"
        }
        curlCmd += " -X " + request.method
        val headers: Headers = request.headers
        var i = 0
        val count: Int = headers.size
        while (i < count) {
            val name: String = headers.name(i)
            val value: String = headers.value(i)
            if ("Accept-Encoding".equals(name, ignoreCase = true) && "gzip".equals(
                    value,
                    ignoreCase = true
                )
            ) {
                compressed = true
            }
            curlCmd += " -H \"$name: $value\""
            i++
        }

        request.body?.let {
            val buffer = Buffer()
            it.writeTo(buffer)

            var charset = UTF8
            it.contentType()?.let { mediaType ->
                charset = mediaType.charset(UTF8)
            }

            // try to keep to a single line and use a subshell to preserve any line breaks
            curlCmd += " --data $'" + buffer.readString(charset!!).replace("\n", "\\n") + "'"
        }

        curlCmd += (if (compressed) " --compressed " else " ") + request.url
        logger.log(
            LogRecord(
                Level.INFO,
                "\n╭--- cURL (" + request.url.toString() + ")\n$curlCmd\n╰--- (copy and paste the above line to a terminal)"
            )
        )
        return chain.proceed(request)
    }

    companion object {
        private val UTF8 = Charset.forName("UTF-8")
    }

}